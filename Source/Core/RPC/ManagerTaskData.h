//=================================================================//
// This file is part of the BrainGenix-API Neuron Emulation System //
//=================================================================//

/*
    Description: This file provides bgStatusCode.
    Additional Notes: None
    Date Created: 2024-02-06
*/

#pragma once

// Standard Libraries (BG convention: use <> instead of "")
#include <string>
#include <thread>
#include <memory>
#include <map>

// Third-Party Libraries (BG convention: use <> instead of "")
#include <nlohmann/json.hpp>


// Internal Libraries (BG convention: use <> instead of "")


namespace BG {
namespace API {
namespace API {


enum ManagerTaskStatus {
    Success = 0, // Completed successfully.
    Active = 1,  // Freshly created and/or actively operating.
    TimeOut = 2, // Failed due to time-out.
    GeneralFailure = 3,
    NUMManagerTaskStatus
};



/**
 * @struct ManagerTaskData
 * @brief A structure that encapsulates data and functionality for managing tasks.
 *
 * This structure is used to manage tasks in the BrainGenix API. It includes input data,
 * task status, output data, and other related information. Tasks are executed in separate
 * threads, and their status and results are stored in this structure.
 */
struct ManagerTaskData {
    /**
     * @brief Input data required for the task.
     */
    std::string InputData;

    /**
     * @brief A unique pointer to the thread executing the task.
     */
    std::unique_ptr<std::thread> Task;

    /**
     * @brief The unique ID of the task.
     */
    int ID = -1;

    /**
     * @brief The current status of the task.
     */
    ManagerTaskStatus Status = ManagerTaskStatus::Active;

    /**
     * @brief The output data generated by the task.
     */
    nlohmann::json OutputData;

    /**
     * @brief The ID of the simulation to be replaced, if applicable.
     */
    int ReplaceSimulationID = -1;

    /**
     * @brief Default constructor for ManagerTaskData.
     */
    ManagerTaskData() {}

    /**
     * @brief Sets the status of the task.
     * 
     * @param _status The new status to set for the task.
     */
    void SetStatus(ManagerTaskStatus _status) { Status = _status; }

    /**
     * @brief Includes the current task status in the output data.
     */
    void IncludeStatusInOutputData() { OutputData["TaskStatus"] = int(Status); }

    /**
     * @brief Checks if the task has a replacement simulation ID.
     * 
     * @return true if a replacement simulation ID exists, false otherwise.
     */
    bool HasReplacementSimID() { return ReplaceSimulationID >= 0; }
};



}; // Close Namespace API
}; // Close Namespace API
}; // Close Namespace BG
